# vim: set filetype=helm:

{{- $timestamp := (now | date "20060102150405") }}
{{- $jobName := printf "%s-%s" (include "postgresql-backup.fullname" .) $timestamp }}
{{- $outputName := .Values.backup.outputFile.fileName | default (printf "%s.sql.gz" $timestamp) }}

apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $jobName }}
  labels:
    {{- include "postgresql-backup.labels" . | nindent 4 }}
spec:  
  backoffLimit: 1
  completions: 1
  parallelism: 1
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "postgresql-backup.selectorLabels" . | nindent 8 }}
    spec:
      restartPolicy: Never
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "postgresql-backup.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
      - name: output
        persistentVolumeClaim:
          claimName: {{ .Values.backup.outputFile.pvcName }}
      - name: temp
        emptyDir: {}
      {{- if .Values.backup.s3.bucket }}
      - name: s3cmd-config
        secret:
          secretName: {{ .Values.s3cmd.config.secretName }}
          defaultMode: 0640
      - name: gnupg-home
        emptyDir: {}
      {{- end }}
      initContainers:
      - name: backup
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
        env:
        - name: PGDATABASE
          value: {{ .Values.backup.database.name }}
        - name: PGUSER
          value: {{ .Values.backup.database.user }}
        {{- if eq "string" (kindOf .Values.backup.database.port) }}
        - name: PGPORT
          value: {{ .Values.backup.database.port | squote }}
        {{- else }}
        - name: PGPORT
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.backup.database.port.configName }}
              key: {{ .Values.backup.database.port.key }}
        {{- end }}{{/* if eq "string" (kindOf .Values.backup.database.port) */}}
        {{- if eq "string" (kindOf .Values.backup.database.host) }}
        - name: PGHOST
          value: {{ .Values.backup.database.host }}
        {{- else }}
        - name: PGHOST
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.backup.database.host.configName }}
              key: {{ .Values.backup.database.host.key }}
        {{- end }}{{/* if eq "string" (kindOf .Values.backup.database.host) */}}
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.backup.database.password.secretName }}
              key: {{ .Values.backup.database.password.key | default "password" }}
        - name: OUTPUT_NAME
          value: {{ $outputName }}
        command:
        - sh
        - -xue
        - -c
        - |-
          pg_dump -v -Fp | gzip -c > "${OUTPUT_NAME}"
        workingDir: /work
        volumeMounts:
        {{- with .Values.backup.outputFile }}
        - name: output
          mountPath: /work
          {{- with .subPath }}
          subPath: {{ . }}
          {{- end }}{{/* with .subPath */}}
        {{- end }}{{/* with .Values.backup.outputFile */}}
        resources: {{- toYaml .Values.resources | nindent 10 }}
      {{- if .Values.backup.s3.bucket }}
      - name: s3cmd
        image: "{{ .Values.s3cmd.image.repository }}:{{ .Values.s3cmd.image.tag }}"
        imagePullPolicy: {{ .Values.s3cmd.image.pullPolicy }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
        env:
        - name: OUTPUT_NAME
          value: {{ $outputName }}
        - name: DEST_URL
          value: {{ printf "s3://%s/%s/%s" (.Values.backup.s3.bucket) (.Values.backup.s3.prefix | default "") $outputName }}
        command:
        - s3cmd
        {{- if .Values.s3cmd.debug }}
        - --debug
        {{- else }}
        - --verbose
        {{- end }}{{/* if .Values.s3cmd.debug */}}
        {{- if .Values.backup.s3.encrypt }}
        - --encrypt
        {{- end }}{{/* if .Values.backup.s3.encrypt */}}
        - --no-preserve
        - put
        - $(OUTPUT_NAME)
        - $(DEST_URL)
        workingDir: /work
        volumeMounts:
        - name: s3cmd-config
          mountPath: /.s3cfg
          subPath: s3cmd.conf
          readOnly: true
        - name: gnupg-home
          mountPath: /.gnupg
        - name: temp
          mountPath: /tmp
        {{- with .Values.backup.outputFile }}
        - name: output
          mountPath: /work
          {{- with .subPath }}
          subPath: {{ . }}
          {{- end }} {{/* with .subPath */}}
        {{- end }}{{/* with .Values.backup.outputFile */}}
        resources: {{- toYaml .Values.resources | nindent 10 }} 
      {{- end }}{{/* if .Values.backup.s3.bucket */}}
      containers:
      - name: stat
        image: busybox:1.36
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
        env:
        - name: OUTPUT_NAME
          value: {{ $outputName }}
        command:
        - stat
        - $(OUTPUT_NAME)
        workingDir: /work
        volumeMounts:
        {{- with .Values.backup.outputFile }}
        - name: output
          mountPath: /work
          {{- with .subPath }}
          subPath: {{ . }}
          {{- end }}{{/* with .subPath */}}
        {{- end }}{{/* with .Values.backup.outputFile */}}
        resources: {{- toYaml .Values.resources | nindent 10 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
