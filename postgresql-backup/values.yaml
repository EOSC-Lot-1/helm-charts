image:
  repository: postgres
  pullPolicy: IfNotPresent
  tag: "15.7"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: false
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext:
  runAsUser: 999
  runAsGroup: 999
  fsGroup: 999
  seccompProfile:
    type: RuntimeDefault

securityContext: 
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  allowPrivilegeEscalation: false

resources: 
  limits:
    cpu: 200m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

nodeSelector: {}
tolerations: []
affinity: {}

backup:
  # target of the backup (in a PV)
  outputFile:
    pvcName: backups
    subPath: ~
    #fileName: backup.sql.gz
  # (optional) upload the backup file to an S3 bucket
  # s3:
  #   bucket: ~
  #   #bucket: backups
  #   #prefix: postgresql
  #   # for encryption to be supported, s3cmd must configure: gpg_{passphrase,command,encrypt,decrypt}
  #   encrypt: false
  database:
    name: example
    #host: postgresql
    host:
      configName: "configname"
      key: "host"
    #port: 5433
    port:
      configName: "configname"
      key: "port"
    user: someone
    password:
      secretName: someone-password
      key: password

# s3cmd only needed if an s3 bucket is also specified
# s3cmd:
#   image:
#     repository: ghcr.io/eosc-lot-1/s3cmd
#     pullPolicy: IfNotPresent
#     tag: 2-alpine
#   config:
#     secretName: s3cmd-config
#   debug: false

